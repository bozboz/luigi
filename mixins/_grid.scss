@function lower-bound($range){
	@if length($range) <= 0 {
		@return 0;
	}
	@return nth($range, 1);
}

@function upper-bound($range) {
	@if length($range) < 2 {
		@return 999999999999;
	}
	@return nth($range, 2);
}

// Media Queries
$screen: "only screen" !default;

$landscape: "#{$screen} and (orientation: landscape)" !default;
$portrait: "#{$screen} and (orientation: portrait)" !default;

$small-up: $screen !default;
$small-only: "#{$screen} and (max-width: #{upper-bound(map-get($breakpoints, small))})" !default;

$medium-up: "#{$screen} and (min-width:#{lower-bound(map-get($breakpoints, medium))})" !default;
$medium-only: "#{$screen} and (min-width:#{lower-bound(map-get($breakpoints, medium))}) and (max-width:#{upper-bound(map-get($breakpoints, medium))})" !default;

$large-up: "#{$screen} and (min-width:#{lower-bound(map-get($breakpoints, large))})" !default;
$large-only: "#{$screen} and (min-width:#{lower-bound(map-get($breakpoints, large))}) and (max-width:#{upper-bound(map-get($breakpoints, large))})" !default;

$xlarge-up: "#{$screen} and (min-width:#{lower-bound(map-get($breakpoints, xlarge))})" !default;
$xlarge-only: "#{$screen} and (min-width:#{lower-bound(map-get($breakpoints, xlarge))}) and (max-width:#{upper-bound(map-get($breakpoints, xlarge))})" !default;

$xxlarge-up: "#{$screen} and (min-width:#{lower-bound(map-get($breakpoints, xxlarge))})" !default;
$xxlarge-only: "#{$screen} and (min-width:#{lower-bound(map-get($breakpoints, xxlarge))}) and (max-width:#{upper-bound(map-get($breakpoints, xxlarge))})" !default;

/**
 *
 * Placeholder generator to align Flex items to top, center and bottom
 *
 * CSS Compiled:
 *	%flex-item--top {
 *		align-self: flex-start;
 *	}
 */

@each $flex-align, $flex-value in $flex-alignments {
	%flex-item--#{$flex-align} {
		align-self: #{$flex-value};
	}
}

/**
 *
 * @mixin make-grid-columns
 * Creates column sizes for both inline-block and flex grids
 *
 * CSS Compiled:
 *	.medium-1 {
 *		width: 8.33333%;
 *	}
 *	.grid--flex .medium-1 {
 *		flex: 0 0 8.33333%;
 *	}
 */

@mixin make-grid-columns($bp-name, $cols) {
	@for $i from 1 through $cols {
		@if $enable-flex {
			.#{$bp-name}-#{$i} {
				width: (100% / $cols) * $i;
			}
			.grid--flex .#{$bp-name}-#{$i} {
				flex: 0 0 (100% / $cols) * $i;
			}
		} @else {
			.#{$bp-name}-#{$i} {
				width: (100% / $cols) * $i;
			}
		}
	}
}

@mixin create-grids($cols: 12, $bps: $breakpoints) {
	@each $bp-name, $bp-range in $bps {
		$bp-value: lower-bound($bp-range);

		// this checks to see if the first in map
		@if $bp-name == nth(map-keys($breakpoints),1) {
			@include make-grid-columns($bp-name, $cols);
		} @else {
			@media all and (min-width: $bp-value) {
				@include make-grid-columns($bp-name, $cols);
			}
		}

		@media all and (min-width: $bp-value) and (max-width: upper-bound($bp-range)) {
			.#{$bp-name}--hidden {
				display: none !important;
			}
		}

	}
}